{"version":3,"sources":["js/CONSTANTS.js","js/default.js","js/refs.js","js/helpers/changeColumn.js","js/main.js","js/helpers/changeTextContent.js","js/currency.js","js/helpers/getTotalProfit.js","js/amount_of_investment.js","js/helpers/getInterestRate.js","js/type_of_deposit.js","js/helpers/changeActiveTickMark.js","js/investment_term.js","index.js"],"names":["TYPE_STANDARD","TYPE_PREMIUM","TYPE_VIP","STANDARD_PERCENT","PREMIUM_PERCENT","VIP_PERCENT","DEFAULT","typeOfDeposit","interestRate","currency","amountOfInvestment","investmentTerm","profit","totalProfit","totalPercents","resultOnInvestment","JSON","parse","localStorage","getItem","setItem","stringify","refs","select","document","querySelector","selectCurrent","selectDrop","currentCurrencyValue","querySelectorAll","currentActiveCurrency","currencyBtn","amountInvestmentRange","amountInvestmentInput","tickMarksItem","currentInvestment","currentInvestmentProfit","currentInvestmentPercents","rate","columnInvested","columnEarn","changeColumn","inv","earn","heightInvestedColumn","heightEarnColumn","forEach","i","style","height","textContent","item","value","btn","addEventListener","console","log","changeTextContent","el","val","dataset","classList","add","currentCurrency","e","target","nodeName","remove","nextCurrentActiveCurrency","selectedCurrency","getTotalProfit","result","Math","round","toFixed","getAmountOfInvestment","currentTarget","getInterestRate","type","percent","getTypeOfDeposit","toggle","changeActiveTickMark","getInvestmentTerm"],"mappings":"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","file":"src.ee3bb0a7.js","sourceRoot":"../src","sourcesContent":["const TYPE_STANDARD = 'Standard';\nconst TYPE_PREMIUM = 'Premium';\nconst TYPE_VIP = 'VIP';\n\nconst STANDARD_PERCENT = 1.5;\nconst PREMIUM_PERCENT = 3;\nconst VIP_PERCENT = 5;\n\nconst DEFAULT = {\n  typeOfDeposit: TYPE_STANDARD,\n  interestRate: STANDARD_PERCENT,\n  currency: 'PLN',\n  amountOfInvestment: 10000,\n  investmentTerm: 1,\n  profit: 0,\n  totalProfit: 0,\n  totalPercents: 0,\n};\n\nexport {\n  TYPE_STANDARD,\n  TYPE_PREMIUM,\n  TYPE_VIP,\n  STANDARD_PERCENT,\n  PREMIUM_PERCENT,\n  VIP_PERCENT,\n  DEFAULT,\n};\n","import { DEFAULT } from './CONSTANTS';\n\nconst resultOnInvestment = JSON.parse(localStorage.getItem('resultOnInvestment'));\nif (resultOnInvestment === null) {\n  localStorage.setItem('resultOnInvestment', JSON.stringify(DEFAULT));\n}\n","const refs = {\n  select: document.querySelector('.type__select'),\n  selectCurrent: document.querySelector('.select-current'),\n  selectDrop: document.querySelector('.select-options'),\n\n  currency: document.querySelector('.currency'),\n  currentCurrencyValue: document.querySelectorAll('.js__current-currency'),\n  currentActiveCurrency: document.querySelector('.currency__button--current'),\n\n  currencyBtn: document.querySelectorAll('.currency__button'),\n  amountInvestmentRange: document.querySelector('.js__amount-range'),\n  amountInvestmentInput: document.querySelector('.js__amount-input'),\n\n  investmentTerm: document.querySelector('.js__term-investment'),\n  tickMarksItem: document.querySelectorAll('.tickmarks__item'),\n\n  currentInvestment: document.querySelectorAll('.js__current-investment'),\n  currentInvestmentProfit: document.querySelectorAll('.js__current-investmentProfit'),\n  currentInvestmentPercents: document.querySelector('.js__current-InvestmentPercents'),\n\n  rate: document.querySelector('.js__rate'),\n  interestRate: document.querySelector('.js__interest-rate'),\n\n  columnInvested: document.querySelectorAll('.js__column-invested'),\n  columnEarn: document.querySelector('.js__column-earn'),\n};\nexport default refs;\n","import refs from '../refs';\nconst { columnInvested, columnEarn } = refs;\n\nconst changeColumn = () => {\n  const resultOnInvestment = JSON.parse(localStorage.getItem('resultOnInvestment'));\n  const inv = resultOnInvestment.amountOfInvestment;\n  const earn = resultOnInvestment.profit;\n  const heightInvestedColumn = `${inv / 280 + 10}px`;\n  const heightEarnColumn = `${earn / 280 + 10}px`;\n\n  columnInvested.forEach(i => (i.style.height = heightInvestedColumn));\n  columnEarn.style.height = heightEarnColumn;\n};\n\nexport { changeColumn };\n","import refs from './refs';\nimport { changeColumn } from './helpers/changeColumn';\n\nconst {\n  selectCurrent,\n  amountInvestmentRange,\n  amountInvestmentInput,\n  currentInvestment,\n  currentInvestmentProfit,\n  investmentTerm,\n} = refs;\nconst resultOnInvestment = JSON.parse(localStorage.getItem('resultOnInvestment'));\n\nselectCurrent.textContent = resultOnInvestment.typeOfDeposit;\ncurrentInvestment.forEach(item => (item.textContent = resultOnInvestment.amountOfInvestment));\ncurrentInvestmentProfit.textContent = resultOnInvestment.profit;\n\namountInvestmentInput.value = resultOnInvestment.amountOfInvestment;\namountInvestmentRange.value = resultOnInvestment.amountOfInvestment;\ninvestmentTerm.value = resultOnInvestment.investmentTerm;\n\nchangeColumn();\n\nconst btn = document.querySelector('.button');\nbtn.addEventListener('click', () => {\n  const resultOnInvestment = JSON.parse(localStorage.getItem('resultOnInvestment'));\n\n  console.log(resultOnInvestment);\n});\n","const changeTextContent = (el, val) => {\n  el.forEach(i => {\n    i.textContent = val;\n  });\n};\n\nexport default changeTextContent;\n","import refs from './refs';\nimport changeTextContent from './helpers/changeTextContent';\nconst { currency, currentCurrencyValue, currencyBtn } = refs;\n\nconst resultOnInvestment = JSON.parse(localStorage.getItem('resultOnInvestment'));\n\nchangeTextContent(currentCurrencyValue, resultOnInvestment.currency);\n\ncurrencyBtn.forEach(i => {\n  const current = resultOnInvestment.currency;\n  if (current === i.dataset.value) {\n    i.classList.add('currency__button--current');\n  }\n});\n\nconst currentCurrency = e => {\n  if (e.target.nodeName !== 'BUTTON') return;\n  const currentActiveCurrency = document.querySelector('.currency__button--current');\n\n  currentActiveCurrency.classList.remove('currency__button--current');\n\n  const nextCurrentActiveCurrency = e.target;\n  nextCurrentActiveCurrency.classList.add('currency__button--current');\n  const selectedCurrency = nextCurrentActiveCurrency.dataset.value;\n  const resultOnInvestment = JSON.parse(localStorage.getItem('resultOnInvestment'));\n  resultOnInvestment.currency = selectedCurrency;\n  localStorage.setItem('resultOnInvestment', JSON.stringify(resultOnInvestment));\n\n  changeTextContent(currentCurrencyValue, resultOnInvestment.currency);\n};\n\ncurrency.addEventListener('click', currentCurrency);\n","import refs from '../refs';\nconst { currentInvestmentProfit, currentInvestmentPercents } = refs;\n\nconst getTotalProfit = value => {\n  const { amountOfInvestment, interestRate, investmentTerm } = value;\n  const result = JSON.parse(localStorage.getItem('resultOnInvestment'));\n\n  let totalProfit = amountOfInvestment;\n\n  for (let i = 0; i < investmentTerm; i++) {\n    totalProfit += totalProfit * (interestRate / 100);\n  }\n  let profit = Math.round(totalProfit) - amountOfInvestment;\n  let totalPercents = +((profit / amountOfInvestment) * 100).toFixed(2);\n\n  result.profit = Math.round(profit);\n  result.totalProfit = Math.round(totalProfit);\n  result.totalPercents = totalPercents;\n\n  currentInvestmentProfit.forEach(i => (i.textContent = profit));\n  currentInvestmentPercents.textContent = totalPercents;\n\n  localStorage.setItem('resultOnInvestment', JSON.stringify(result));\n};\n\nexport { getTotalProfit };\n","import refs from './refs';\nimport { getTotalProfit } from './helpers/getTotalProfit';\nimport { changeColumn } from './helpers/changeColumn';\nconst { amountInvestmentRange, amountInvestmentInput, currentInvestment, currentInvestmentProfit } =\n  refs;\n\nconst getAmountOfInvestment = e => {\n  const resultOnInvestment = JSON.parse(localStorage.getItem('resultOnInvestment'));\n  let value;\n\n  value = e.currentTarget.value;\n  if (e.currentTarget.value > 50000) {\n    e.currentTarget.value = 50000;\n    return;\n  }\n  amountInvestmentInput.value = value;\n  amountInvestmentRange.value = value;\n  currentInvestment.forEach(item => {\n    item.textContent = value;\n  });\n  resultOnInvestment.amountOfInvestment = +value;\n\n  localStorage.setItem('resultOnInvestment', JSON.stringify(resultOnInvestment));\n  getTotalProfit(resultOnInvestment);\n  changeColumn();\n};\n\namountInvestmentRange.addEventListener('change', getAmountOfInvestment);\namountInvestmentInput.addEventListener('input', getAmountOfInvestment);\n","import refs from '../refs';\nimport { getTotalProfit } from './getTotalProfit';\nimport { changeColumn } from './changeColumn';\n\nconst { interestRate } = refs;\nimport {\n  TYPE_STANDARD,\n  TYPE_PREMIUM,\n  TYPE_VIP,\n  STANDARD_PERCENT,\n  PREMIUM_PERCENT,\n  VIP_PERCENT,\n} from '../CONSTANTS';\n\nconst getInterestRate = type => {\n  let percent;\n\n  switch (type) {\n    case TYPE_STANDARD:\n      percent = STANDARD_PERCENT;\n      break;\n    case TYPE_PREMIUM:\n      percent = PREMIUM_PERCENT;\n      break;\n    case TYPE_VIP:\n      percent = VIP_PERCENT;\n      break;\n  }\n\n  const result = JSON.parse(localStorage.getItem('resultOnInvestment'));\n  result.interestRate = percent;\n  localStorage.setItem('resultOnInvestment', JSON.stringify(result));\n\n  interestRate.textContent = `${result.interestRate}%`;\n\n  getTotalProfit(result);\n  changeColumn();\n};\nexport { getInterestRate };\n","import refs from './refs';\nimport { getInterestRate } from './helpers/getInterestRate';\n\nconst { select, selectDrop, selectCurrent } = refs;\n\nconst getTypeOfDeposit = e => {\n  const resultOnInvestment = JSON.parse(localStorage.getItem('resultOnInvestment'));\n  selectDrop.classList.toggle('is-open');\n  if (e.target.classList.value != 'select-item') return;\n  const result = e.target.textContent;\n  selectCurrent.textContent = result;\n\n  resultOnInvestment.typeOfDeposit = result;\n  localStorage.setItem('resultOnInvestment', JSON.stringify(resultOnInvestment));\n\n  getInterestRate(result);\n};\n\ngetInterestRate(selectCurrent.textContent);\n\nselect.addEventListener('click', getTypeOfDeposit);\n","const changeActiveTickMark = (el, val) => {\n  el.forEach((el, i) => {\n    const result = val;\n    if (result === i + 1) el.classList.add('tickmarks__item--isActive');\n  });\n};\n\nexport { changeActiveTickMark };\n","import refs from './refs';\nimport { getTotalProfit } from './helpers/getTotalProfit';\nimport { changeColumn } from './helpers/changeColumn';\nimport { changeActiveTickMark } from './helpers/changeActiveTickMark';\nconst { investmentTerm, tickMarksItem } = refs;\n\nconst resultOnInvestment = JSON.parse(localStorage.getItem('resultOnInvestment'));\n\nchangeActiveTickMark(tickMarksItem, resultOnInvestment.investmentTerm);\n\nconst getInvestmentTerm = e => {\n  const result = +e.target.value;\n  resultOnInvestment.investmentTerm = result;\n\n  const tickMarksItemIsActive = document.querySelector('.tickmarks__item--isActive');\n\n  tickMarksItemIsActive.classList.remove('tickmarks__item--isActive');\n  changeActiveTickMark(tickMarksItem, resultOnInvestment.investmentTerm);\n\n  localStorage.setItem('resultOnInvestment', JSON.stringify(resultOnInvestment));\n  getTotalProfit(resultOnInvestment);\n  changeColumn();\n};\n\ninvestmentTerm.addEventListener('change', getInvestmentTerm);\n","import './main.scss';\n\nimport './js/default';\nimport './js/main';\nimport './js/currency';\nimport './js/amount_of_investment';\nimport './js/type_of_deposit';\nimport './js/investment_term';\n"]}